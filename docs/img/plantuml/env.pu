@startuml enva

interface Space<D: Dimension> {
    type Matrix
    + dimension: Tuple
    + currentMatrix: LazyList<Cell<D>>
    + neighbours(cell: Cell<D>): Neighbour<D>
    # initialise(): Unit
    # availableCells(p: Iterable<Position<D>>): Iterable<Cell<D>>

}

interface GenericEnvironment<D: Dimension, R> {
    # saveCell(cell: Cell<D>): Unit
    + nextIteration(): Unit
    + applyRule(n: Neighbour<D>): R
}

interface SimpleEnvironment<D> {
    + cellularAutomaton: CellularAutomaton[D]
    + applyRule(n: Neighbour<D>): Cell<D>
}

interface ComplexEnvironment<D> {
    + cellularAutomaton: MultiOutputCellularAutomaton<D>
    + applyRule(n: Neighbour<D>): Iterable<Cell<D>>
}

interface ArrayEnvironment2D {
    type Matrix = ArrayBuffer<ArrayBuffer<Cell<TwoDimensionalSpace>>>
}

interface ArrayToroidEnvironment
interface SquareArrayEnvironment2D
interface RectangualArrayEnvironment2D

GenericEnvironment -down-|> Space
SimpleEnvironment -down-|> GenericEnvironment
ComplexEnvironment -down-|> GenericEnvironment
ArrayEnvironment2D -down-|> GenericEnvironment

ArrayToroidEnvironment -down-|> ToroidEnvironment
ArrayToroidEnvironment -up-|> ArrayEnvironment2D
SquareArrayEnvironment2D -down-|> SquareEnvironment
SquareArrayEnvironment2D -up-|> ArrayEnvironment2D
RectangualArrayEnvironment2D -down-|> RectangularEnvironment
RectangualArrayEnvironment2D -up-|> ArrayEnvironment2D

interface SquareEnvironment {
    + side: Int
    + dimensions: (Int, Int)
}

interface CubicEnvironment {
    + edge: Int
    + dimension: (Int, Int, Int)
}


interface ToroidEnvironment {}

interface TrieMapEnvironment {}

interface RectangularEnvironment {
    + width: Int
    + height: Int
    + dimension: (Int, Int)
}

SquareEnvironment -up-|> Space
CubicEnvironment -up-|> Space
RectangularEnvironment -up-|> Space
TrieMapEnvironment -up-|> Space

ToroidEnvironment -right-|> RectangularEnvironment

@enduml